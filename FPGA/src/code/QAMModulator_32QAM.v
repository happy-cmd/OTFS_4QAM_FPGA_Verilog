//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? 10? 31 2024 11:14:22
//
//      Input file      : 
//      Component name  : qammodulator_32qam
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------
module QAMModulator_32QAM (
    input wire Clk,
    input wire SRst,
    input wire Start,
    input wire DataValidIn,
    input wire Data,
    output reg ModDataOutValid,
    output reg FrameBeginnigIndicator,
    output reg [7:0] FrameNum,
    output reg [7:0] DataNum,
    output wire signed [11:0] ModDataOutRe,
    output wire signed [11:0] ModDataOutIm
);
  // Define the size of the LUT
  reg [4:0] CurrBits = 5'd0;

wire [5:0]CurrBits_a;
assign CurrBits_a=CurrBits+6'd32;
// 使用CurrBits_32 和CurrBits_a 会产生不同的结果
  ROM_32QAM_ReIm LUT_32QAM (
  .clka(Clk),    // input wire clka
  .addra({1'b0,CurrBits}),  // input wire [5 : 0] addra    0~31   实部信号
  .douta(ModDataOutRe),  // output wire [11 : 0] douta
  .clkb(Clk),    // input wire clkb
  .addrb(CurrBits_a),  // input wire [5 : 0] addrb  32~63   虚部信号
  .doutb(ModDataOutIm)  // output wire [11 : 0] doutb
);

  parameter FRAME_LEN = 64;
  parameter FRAME_COUNT = 64;
  parameter IDLE = 0;
  parameter Gen32QAM = 1;
  parameter Gen32QAM_2 = 2;
  reg [1:0]State = IDLE;

  reg [3:0] CurrBitCount = 0;
  reg [15:0] DataCount = 0;

  always @(posedge Clk) begin
    if (SRst) begin
      State <= IDLE;
      ModDataOutValid <= 0;
      FrameBeginnigIndicator <= 0;
      DataCount <= 0;
      CurrBitCount <= 0;
      CurrBits <= 5'd0;
    end else begin
      ModDataOutValid <= 0;  // Default output valid
      FrameBeginnigIndicator <= 0;

      case (State)
        IDLE: begin
          DataCount <= 1;
          CurrBitCount <= 0;
          CurrBits <= 5'd0;
          if (Start) begin
            State <= Gen32QAM;
          end
        end

        Gen32QAM: begin
          if (DataValidIn) begin
            CurrBitCount <= CurrBitCount + 1;
            CurrBits <= {CurrBits[3:0], Data};  // Shift in the new bit
            if (CurrBitCount == 4) begin
               CurrBitCount <= 0;
               State<=Gen32QAM_2;
             end 
          end
        end
        Gen32QAM_2:begin
            if (DataValidIn) begin
                CurrBitCount <= CurrBitCount + 1;
                CurrBits <= {CurrBits[3:0], Data};  // Shift in the new bit
            end
            ModDataOutValid <= 1;
            DataCount <= DataCount + 1;
            if (DataCount == 16'h1000) begin  // 4096 in decimal
                State <= IDLE;
            end
            else 
                State <= Gen32QAM;
        end

        default: begin
          State <= IDLE;
        end
      endcase
    end
  end
  
  always @* begin
    FrameNum = DataCount[13:6];
    DataNum  = {2'b00, DataCount[5:0]};
  end

endmodule
