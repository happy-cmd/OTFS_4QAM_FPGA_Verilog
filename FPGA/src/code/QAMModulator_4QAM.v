//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? 10? 31 2024 11:14:22
//
//      Input file      : 
//      Component name  : qammodulator_32qam
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------
module QAMModulator_4QAM (
    input wire Clk,
    input wire SRst,
    input wire Start,
    input wire DataValidIn,
    input wire Data,
    output reg ModDataOutValid,
    output reg FrameBeginnigIndicator,
    output reg [7:0] FrameNum,
    output reg [7:0] DataNum,
    output reg signed [11:0] ModDataOutRe,
    output reg signed [11:0] ModDataOutIm,
    output reg [1:0] QAMData_instruct
);



  parameter FRAME_LEN = 64;
  parameter FRAME_COUNT = 64;
  parameter IDLE = 0;
  reg [1:0]State = IDLE;

  reg [3:0] CurrBitCount = 0;
  reg [15:0] DataCount = 0;
  
  reg Data_delay,DataValidIn_delay;
  always @(posedge Clk) begin
    if (SRst) begin
      State <= IDLE;
      ModDataOutValid <= 0;
      FrameBeginnigIndicator <= 0;
      DataCount <= 0;
      CurrBitCount <= 0;
      Data_delay<=0;
      DataValidIn_delay<=0;
    end else begin
      ModDataOutValid <= 0;  // Default output valid
      FrameBeginnigIndicator <= 0;
      Data_delay<=Data;
      DataValidIn_delay<=DataValidIn;

      case (State)
        IDLE: begin
          DataCount <= 0;
          CurrBitCount <= 0;
          if (Start) begin
            State <= 1;
          end
        end

        1: begin      
            if(DataValidIn_delay)begin
                if(CurrBitCount == 1)begin
                    ModDataOutRe<=0;
                    ModDataOutIm<=0;
                    ModDataOutValid<=0;
                    CurrBitCount<=0;
                end
                else begin
                    CurrBitCount<=CurrBitCount+1;
                    DataCount<=DataCount+1;
                                    if(DataCount==16'd4096)begin
                                        State<=IDLE;
                                    end
                                    case({Data_delay,Data})
                                     2'b00:begin
                                        ModDataOutRe<=12'b101001011000; // -1448
                                        ModDataOutIm<=12'b010110101000; // 1448
                                        ModDataOutValid<=1;
                                        QAMData_instruct<=0;
                                     end
                                     2'b01:begin
                                        ModDataOutRe<=12'b101001011000; // -1448
                                        ModDataOutIm<=12'b101001011000; // -1448
                                        ModDataOutValid<=1;
                                        QAMData_instruct<=1;
                                     end
                                     2'b10:begin
                                        ModDataOutRe<=12'b010110101000; // 1448
                                        ModDataOutIm<=12'b010110101000; // 1448
                                        ModDataOutValid<=1;
                                        QAMData_instruct<=2;
                                     end
                                     2'b11:begin
                                        ModDataOutRe<=12'b010110101000; // 1448
                                        ModDataOutIm<=12'b101001011000; // -1448
                                        ModDataOutValid<=1;
                                        QAMData_instruct<=3;
                                     end
                                    endcase
                end
            end
        end

        default: begin
          State <= IDLE;
        end
      endcase
    end
  end
  
  always @(posedge Clk) begin
    FrameNum <= DataCount[13:6];
    DataNum  <= {2'b00, DataCount[5:0]};
  end

endmodule
